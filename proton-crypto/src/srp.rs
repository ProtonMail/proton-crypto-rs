//! Provides an API for Proton's SRP protocol.
use subtle::ConstantTimeEq;

/// Represents SRP proof generated by the client based on
/// a sever response.
#[derive(Debug)]
pub struct ClientProof {
    /// The SRP Proof.
    pub proof: String,
    /// The client ephemeral public key.
    pub ephemeral: String,
    /// The expected server proof.
    pub expected_server_proof: String,
}

impl ClientProof {
    /// Compare the server proof to the locally computed server proof in constant time.
    pub fn compare_server_proof(&self, server_proof: &str) -> bool {
        self.expected_server_proof
            .as_bytes()
            .ct_eq(server_proof.as_bytes())
            .into()
    }
}

/// This type represents a client `SRP` verifier.
///
/// An `SRP` verifier is required to register with the server
/// for example on Proton account creation or password reset.
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ClientVerifier {
    /// The Proton SRP protocol version.
    pub version: u8,

    /// The randomly generated salt encoded as a base64 string.
    pub salt: String,

    /// The SRP verifier encoded as a base64 string.
    pub verifier: String,
}

/// Trait that allows to split a bcrypt password hash into its components.
///
/// A bcrypt hash has the form: `$2y$10[22 character salt (base64 encoded)][31 character hash (base64 encoded)]`.
pub trait HashedPassword: AsRef<[u8]> {
    /// Returns the bcrypt hash prefix, formatted as `$2y$10[22-character salt (base64 encoded)]`.
    ///
    /// This prefix includes the bcrypt version (`$2y$`), the cost factor (`10`),
    /// and the 22-character based64 encoded salt used during hashing.
    fn prefix(&self) -> &[u8];

    /// Returns the hashed password portion of the bcrypt hash, which is a 31-character base64 encoded string.
    ///
    /// This part follows the bcrypt prefix ([`HashedPassword::prefix`])
    /// and represents the hashed result of the user's password.
    /// At Proton this hash is used for account key decryption.
    fn password_hash(&self) -> &[u8];
}

/// Provides an API for Proton's SRP protocol.
pub trait SRPProvider: Send + Sync {
    /// Type for a hashed password which is highly sensitive.
    type HashedPassword: HashedPassword;

    /// Generates an `SRP` client proof based on the server's `SRP` initialization response
    /// and the provided client credentials.
    ///
    /// This function is used in the Secure Remote Password (SRP) protocol to
    /// generate a proof that the client knows the correct credentials, without
    /// transmitting the password directly. It is part of Proton's authentication process.
    ///
    /// # Parameters
    ///
    /// * `username` - The client's username. (Obsolete: No longer used after protocol version 4)
    /// * `password` - The client's password.
    /// * `version`  - The Proton SRP protocol version.
    /// * `salt`     - The SRP salt provided by the server, used for hashing the password (encoded in base64).
    /// * `modulus`  - An `OpenPGP` signed message containing the SRP modulus as provided by the server.
    /// * `server_ephemeral` - The server's ephemeral value from the SRP protocol (encoded in base64).
    ///
    /// # Errors
    ///
    /// Returns a [`crate::CryptoError`] if client proof generation fails.
    fn generate_client_proof(
        &self,
        username: &str,
        password: &str,
        version: u8,
        salt: &str,
        modulus: &str,
        server_ephemeral: &str,
    ) -> crate::Result<ClientProof>;

    /// Computes a Proton mailbox password hash, which is used to unlock the account's encryption keys.
    ///
    /// This function internally uses the bcrypt algorithm to hash the user's password.
    ///
    /// # Parameters
    ///
    /// * `password` - The user's password.
    /// * `salt`     - A 16-byte salt used in the bcrypt hashing process.
    ///
    /// # Errors
    ///
    /// Returns a [`crate::CryptoError`] if the password hashing process fails, which could occur due to
    /// invalid inputs or internal cryptographic errors.
    fn mailbox_password(
        &self,
        password: impl AsRef<[u8]>,
        salt: impl AsRef<[u8]>,
    ) -> crate::Result<Self::HashedPassword>;

    /// Generates a client SRP verifier.
    ///
    /// An `SRP` verifier is required for example on Proton account creation or password reset.
    ///
    /// # Parameters
    ///
    /// * `password` - The user's password.
    /// * `modulus`  - An `OpenPGP` signed message containing the SRP modulus as provided by the server.
    ///
    /// # Errors
    ///
    /// Returns a [`crate::CryptoError`] if the generation fails.
    fn generate_client_verifier(
        &self,
        password: &str,
        modulus: &str,
    ) -> crate::Result<ClientVerifier>;
}
